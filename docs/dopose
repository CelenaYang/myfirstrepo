import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, addDoc, collection, query, onSnapshot, updateDoc, deleteDoc, getDocs } from 'firebase/firestore';

// Global variables for Firebase configuration provided by the environment
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? initialAuthToken : null;

function App() {
    // Firebase instances
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    // Form data states
    const [senderCenter, setSenderCenter] = useState('');
    const [senderName, setSenderName] = useState('');
    const [recipientCompany, setRecipientCompany] = useState('');
    const [recipientName, setRecipientName] = useState('');
    const [recipientTitle, setRecipientTitle] = useState('');
    const [recipientZip, setRecipientZip] = useState('');
    const [recipientCity, setRecipientCity] = useState('');
    const [recipientDistrict, setRecipientDistrict] = useState('');
    const [recipientAddress, setRecipientAddress] = useState('');
    const [recipients, setRecipients] = useState([]); // List of recipients for the current form
    const [editingRecipientIndex, setEditingRecipientIndex] = useState(null); // Index of recipient being edited

    // List of all submitted forms
    const [submittedForms, setSubmittedForms] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [message, setMessage] = useState(''); // For user messages (e.g., success, error)
    const [showConfirmDialog, setShowConfirmDialog] = useState(false);
    const [formToDelete, setFormToDelete] = useState(null);

    // Initialize Firebase and set up authentication listener
    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const firebaseAuth = getAuth(app);

            setDb(firestore);
            setAuth(firebaseAuth);

            // Sign in with custom token or anonymously
            const signIn = async () => {
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(firebaseAuth, initialAuthToken);
                    } else {
                        await signInAnonymously(firebaseAuth);
                    }
                } catch (error) {
                    console.error("Firebase authentication failed:", error);
                    setMessage(`認證失敗: ${error.message}`);
                }
            };
            signIn();

            // Listen for auth state changes
            const unsubscribe = onAuthStateChanged(firebaseAuth, (user) => {
                if (user) {
                    setUserId(user.uid);
                } else {
                    setUserId(crypto.randomUUID()); // Fallback for unauthenticated users
                }
                setIsAuthReady(true);
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Failed to initialize Firebase:", error);
            setMessage(`Firebase 初始化失敗: ${error.message}`);
            setIsLoading(false);
        }
    }, []);

    // Fetch data from Firestore once auth is ready
    useEffect(() => {
        if (db && userId && isAuthReady) {
            const formsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/giftForms`);
            const q = query(formsCollectionRef);

            const unsubscribe = onSnapshot(q, (snapshot) => {
                const formsData = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                // Sort by creation date, newest first
                formsData.sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0));
                setSubmittedForms(formsData);
                setIsLoading(false);
            }, (error) => {
                console.error("Error fetching documents:", error);
                setMessage(`載入資料失敗: ${error.message}`);
                setIsLoading(false);
            });

            return () => unsubscribe();
        }
    }, [db, userId, isAuthReady, appId]);

    // Handler for adding/updating a recipient
    const handleAddRecipient = () => {
        if (!recipientCompany || !recipientName || !recipientAddress) {
            setMessage('請填寫收件者公司、姓名和地址。');
            return;
        }

        const newRecipient = {
            company: recipientCompany,
            name: recipientName,
            title: recipientTitle,
            zip: recipientZip,
            city: recipientCity,
            district: recipientDistrict,
            address: recipientAddress,
        };

        if (editingRecipientIndex !== null) {
            // Update existing recipient
            const updatedRecipients = [...recipients];
            updatedRecipients[editingRecipientIndex] = newRecipient;
            setRecipients(updatedRecipients);
            setEditingRecipientIndex(null);
            setMessage('收件者資料已更新。');
        } else {
            // Add new recipient
            setRecipients([...recipients, newRecipient]);
            setMessage('收件者已新增。');
        }

        // Clear recipient input fields
        setRecipientCompany('');
        setRecipientName('');
        setRecipientTitle('');
        setRecipientZip('');
        setRecipientCity('');
        setRecipientDistrict('');
        setRecipientAddress('');
    };

    // Handler for editing a recipient
    const handleEditRecipient = (index) => {
        const recipientToEdit = recipients[index];
        setRecipientCompany(recipientToEdit.company);
        setRecipientName(recipientToEdit.name);
        setRecipientTitle(recipientToEdit.title);
        setRecipientZip(recipientToEdit.zip);
        setRecipientCity(recipientToEdit.city);
        setRecipientDistrict(recipientToEdit.district);
        setRecipientAddress(recipientToEdit.address);
        setEditingRecipientIndex(index);
        setMessage('請修改收件者資料。');
    };

    // Handler for deleting a recipient
    const handleDeleteRecipient = (index) => {
        const updatedRecipients = recipients.filter((_, i) => i !== index);
        setRecipients(updatedRecipients);
        setMessage('收件者已刪除。');
    };

    // Handler for submitting the entire form
    const handleSubmitForm = async () => {
        if (!db || !userId) {
            setMessage('Firebase 尚未準備好，請稍候。');
            return;
        }
        if (!senderCenter || !senderName) {
            setMessage('請填寫寄件者中心別和姓名。');
            return;
        }
        if (recipients.length === 0) {
            setMessage('請至少新增一位收件者。');
            return;
        }

        setIsLoading(true);
        try {
            const formData = {
                sender: {
                    center: senderCenter,
                    name: senderName,
                },
                recipients: recipients,
                recipientCount: recipients.length,
                timestamp: new Date(), // Add a timestamp for sorting
                userId: userId, // Store the user ID with the form
            };

            const formsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/giftForms`);
            await addDoc(formsCollectionRef, formData);

            setMessage('表單已成功送出並儲存！');

            // --- 新增的程式碼區塊：將資料發送到 Google Apps Script ---
            // 您提供的 Apps Script 部署網址
            const appsScriptUrl = 'https://script.google.com/macros/s/AKfycbw3GWDlulUMyqsstnzJTZgCE0UZvfmk8m455vIszSvA4K4-UdcwXOy0TP0_tRpLNSzprA/exec'; 
            console.log("嘗試連接 Apps Script URL:", appsScriptUrl); // 增加日誌以確認 URL

            try {
                const response = await fetch(appsScriptUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json', // 改成 application/json
                    },
                    body: JSON.stringify(formData), // 將資料轉換為 JSON 字串
                });

                // 檢查回應是否成功，並解析 JSON
                if (!response.ok) {
                    // 如果 HTTP 狀態碼不是 2xx，則嘗試讀取錯誤訊息
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }

                const result = await response.json();
                if (result.success) {
                    setMessage('表單已成功送出並儲存，並已同步到 Google Sheet！');
                } else {
                    console.error("Error sending to Apps Script (server response):", result.error); // 更詳細的錯誤日誌
                    setMessage(`表單已儲存，但同步到 Google Sheet 失敗: ${result.error}`);
                }
            } catch (appsScriptError) {
                console.error("Error connecting to Apps Script (fetch error):", appsScriptError); // 更詳細的錯誤日誌
                setMessage(`表單已儲存，但無法連接到 Google Sheet 服務: ${appsScriptError.message}`);
            }
            // --- 結束新增的程式碼區塊 ---


            // Clear all form data after successful submission
            setSenderCenter('');
            setSenderName('');
            setRecipients([]);
            setIsLoading(false);
        } catch (error) {
            console.error("Error adding document:", error);
            setMessage(`送出表單失敗: ${error.message}`);
            setIsLoading(false);
        }
    };

    // Handler for editing a submitted form
    const handleEditSubmittedForm = (form) => {
        // Populate the form fields with the selected form's data
        setSenderCenter(form.sender.center);
        setSenderName(form.sender.name);
        setRecipients(form.recipients);
        // For editing submitted forms, we might need a way to identify the form being edited
        // For simplicity, we'll just re-populate the current form.
        // A more complex solution would involve a dedicated "Edit Form" state.
        setMessage('已載入表單資料進行修改。請修改後重新送出。');
    };

    // Handler for deleting a submitted form
    const handleDeleteSubmittedForm = async (formId) => {
        if (!db || !userId) {
            setMessage('Firebase 尚未準備好。');
            return;
        }
        setIsLoading(true);
        try {
            const docRef = doc(db, `artifacts/${appId}/users/${userId}/giftForms`, formId);
            await deleteDoc(docRef);
            setMessage('表單已成功刪除！');
            setShowConfirmDialog(false);
            setFormToDelete(null);
            setIsLoading(false);
        } catch (error) {
            console.error("Error deleting document:", error);
            setMessage(`刪除表單失敗: ${error.message}`);
            setIsLoading(false);
        }
    };

    const confirmDelete = (formId) => {
        setFormToDelete(formId);
        setShowConfirmDialog(true);
    };

    const cancelDelete = () => {
        setShowConfirmDialog(false);
        setFormToDelete(null);
    };


    if (!isAuthReady || isLoading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4">
                <div className="text-center text-lg font-semibold text-gray-700">
                    載入中...
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 sm:p-6 md:p-8 font-inter text-gray-800">
            <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-2xl p-6 sm:p-8 md:p-10">
                <h1 className="text-3xl sm:text-4xl font-extrabold text-center text-indigo-700 mb-8">送禮表單</h1>

                {message && (
                    <div className="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-md relative mb-6" role="alert">
                        <span className="block sm:inline">{message}</span>
                        <span className="absolute top-0 bottom-0 right-0 px-4 py-3" onClick={() => setMessage('')}>
                            <svg className="fill-current h-6 w-6 text-blue-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 2.65a1.2 1.2 0 1 1-1.697-1.697L8.303 10l-2.651-2.651a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-2.651a1.2 1.2 0 1 1 1.697 1.697L11.697 10l2.651 2.651a1.2 1.2 0 0 1 0 1.698z"/></svg>
                        </span>
                    </div>
                )}

                {/* 步驟一：填寫資料區塊 - 寄件者 */}
                <section className="mb-10 p-6 bg-indigo-50 rounded-lg shadow-inner">
                    <h2 className="text-2xl font-bold text-indigo-600 mb-6 border-b-2 border-indigo-300 pb-2">步驟一：填寫資料</h2>
                    <p className="text-gray-700 mb-6">請在此區塊填寫一次寄件者資訊，下方可新增多筆收件者資料。</p> {/* Added clarification */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                        <div>
                            <label htmlFor="senderCenter" className="block text-sm font-medium text-gray-700 mb-1">寄件者中心別</label>
                            <input
                                type="text"
                                id="senderCenter"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={senderCenter}
                                onChange={(e) => setSenderCenter(e.target.value)}
                                placeholder="例如：總務部"
                            />
                        </div>
                        <div>
                            <label htmlFor="senderName" className="block text-sm font-medium text-gray-700 mb-1">寄件者姓名</label>
                            <input
                                type="text"
                                id="senderName"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={senderName}
                                onChange={(e) => setSenderName(e.target.value)}
                                placeholder="例如：王小明"
                            />
                        </div>
                    </div>

                    {/* 收件者資料 */}
                    <h3 className="text-xl font-semibold text-indigo-600 mb-4">收件者資料</h3>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-6">
                        <div>
                            <label htmlFor="recipientCompany" className="block text-sm font-medium text-gray-700 mb-1">公司別 <span className="text-red-500">*</span></label>
                            <input
                                type="text"
                                id="recipientCompany"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={recipientCompany}
                                onChange={(e) => setRecipientCompany(e.target.value)}
                                placeholder="例如：ABC 公司"
                            />
                        </div>
                        <div>
                            <label htmlFor="recipientName" className="block text-sm font-medium text-gray-700 mb-1">收件者姓名 <span className="text-red-500">*</span></label>
                            <input
                                type="text"
                                id="recipientName"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={recipientName}
                                onChange={(e) => setRecipientName(e.target.value)}
                                placeholder="例如：陳大華"
                            />
                        </div>
                        <div>
                            <label htmlFor="recipientTitle" className="block text-sm font-medium text-gray-700 mb-1">職稱</label>
                            <input
                                type="text"
                                id="recipientTitle"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={recipientTitle}
                                onChange={(e) => setRecipientTitle(e.target.value)}
                                placeholder="例如：經理"
                            />
                        </div>
                        <div>
                            <label htmlFor="recipientZip" className="block text-sm font-medium text-gray-700 mb-1">郵遞區號</label>
                            <input
                                type="text"
                                id="recipientZip"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={recipientZip}
                                onChange={(e) => setRecipientZip(e.target.value)}
                                placeholder="例如：100"
                            />
                        </div>
                        <div>
                            <label htmlFor="recipientCity" className="block text-sm font-medium text-gray-700 mb-1">縣市</label>
                            <input
                                type="text"
                                id="recipientCity"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={recipientCity}
                                onChange={(e) => setRecipientCity(e.target.value)}
                                placeholder="例如：台北市"
                            />
                        </div>
                        <div>
                            <label htmlFor="recipientDistrict" className="block text-sm font-medium text-gray-700 mb-1">區</label>
                            <input
                                type="text"
                                id="recipientDistrict"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={recipientDistrict}
                                onChange={(e) => setRecipientDistrict(e.target.value)}
                                placeholder="例如：中正區"
                            />
                        </div>
                        <div className="sm:col-span-2">
                            <label htmlFor="recipientAddress" className="block text-sm font-medium text-gray-700 mb-1">地址 <span className="text-red-500">*</span></label>
                            <input
                                type="text"
                                id="recipientAddress"
                                className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={recipientAddress}
                                onChange={(e) => setRecipientAddress(e.target.value)}
                                placeholder="例如：忠孝東路一段1號"
                            />
                        </div>
                    </div>
                    <button
                        onClick={handleAddRecipient}
                        className="w-full sm:w-auto px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-150 ease-in-out"
                    >
                        {editingRecipientIndex !== null ? '更新收件者' : '新增收件者'}
                    </button>
                </section>

                {/* 步驟二：建檔完成的資料顯示區塊 */}
                <section className="mb-10 p-6 bg-white rounded-lg shadow-lg border border-gray-200">
                    <h2 className="text-2xl font-bold text-indigo-600 mb-6 border-b-2 border-indigo-300 pb-2">步驟二：確認資料</h2>
                    <div className="mb-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-2">寄件者資訊</h3>
                        <p className="text-gray-700">
                            <span className="font-medium">中心別:</span> {senderCenter || '未填寫'}
                        </p>
                        <p className="text-gray-700">
                            <span className="font-medium">姓名:</span> {senderName || '未填寫'}
                        </p>
                    </div>

                    <h3 className="text-xl font-semibold text-gray-800 mb-4">
                        收件者清單 (總筆數: {recipients.length})
                    </h3>
                    {recipients.length === 0 ? (
                        <p className="text-gray-600 italic">尚未新增任何收件者。</p>
                    ) : (
                        <div className="overflow-x-auto rounded-lg border border-gray-200 shadow-sm">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">公司別</th>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">姓名</th>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">職稱</th>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">地址</th>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {recipients.map((recipient, index) => (
                                        <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{recipient.company}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{recipient.name}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{recipient.title || '-'}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                                {`${recipient.zip || ''}${recipient.city || ''}${recipient.district || ''}${recipient.address || ''}`}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                <button
                                                    onClick={() => handleEditRecipient(index)}
                                                    className="text-indigo-600 hover:text-indigo-900 mr-4 transition duration-150 ease-in-out"
                                                >
                                                    修改
                                                </button>
                                                <button
                                                    onClick={() => handleDeleteRecipient(index)}
                                                    className="text-red-600 hover:text-red-900 transition duration-150 ease-in-out"
                                                >
                                                    刪除
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    )}
                </section>

                {/* 步驟三：確認資料無誤後按送出 */}
                <section className="text-center p-6 bg-indigo-50 rounded-lg shadow-inner">
                    <h2 className="text-2xl font-bold text-indigo-600 mb-6 border-b-2 border-indigo-300 pb-2">步驟三：送出表單</h2>
                    <button
                        onClick={handleSubmitForm}
                        disabled={!senderCenter || !senderName || recipients.length === 0 || isLoading}
                        className="px-8 py-3 bg-green-600 text-white font-bold text-lg rounded-md shadow-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-150 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        送出表單
                    </button>
                </section>

                {/* 已送出表單列表 */}
                <section className="mt-12 p-6 bg-white rounded-xl shadow-lg border border-gray-200">
                    <h2 className="2xl font-bold text-indigo-600 mb-6 border-b-2 border-indigo-300 pb-2">已送出表單</h2>
                    {submittedForms.length === 0 ? (
                        <p className="text-gray-600 italic">目前沒有已送出的表單。</p>
                    ) : (
                        <div className="space-y-6">
                            {submittedForms.map((form) => (
                                <div key={form.id} className="border border-gray-200 rounded-lg p-4 shadow-sm bg-gray-50">
                                    <div className="flex justify-between items-center mb-3">
                                        <h3 className="text-lg font-semibold text-gray-800">
                                            寄件者: {form.sender.name} ({form.sender.center})
                                        </h3>
                                        <div className="flex space-x-2">
                                            <button
                                                onClick={() => handleEditSubmittedForm(form)}
                                                className="px-3 py-1 bg-blue-500 text-white text-sm rounded-md hover:bg-blue-600 transition duration-150 ease-in-out"
                                            >
                                                載入編輯
                                            </button>
                                            <button
                                                onClick={() => confirmDelete(form.id)}
                                                className="px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition duration-150 ease-in-out"
                                            >
                                                刪除
                                            </button>
                                        </div>
                                    </div>
                                    <p className="text-sm text-gray-600 mb-2">
                                        送出時間: {form.timestamp?.toDate().toLocaleString() || 'N/A'}
                                    </p>
                                    <p className="text-gray-700 font-medium mb-2">收件者總筆數: {form.recipientCount}</p>
                                    <div className="overflow-x-auto">
                                        <table className="min-w-full divide-y divide-gray-200">
                                            <thead className="bg-gray-100">
                                                <tr>
                                                    <th scope="col" className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">公司</th>
                                                    <th scope="col" className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">姓名</th>
                                                    <th scope="col" className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">地址</th>
                                                </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                                {form.recipients.map((rec, idx) => (
                                                    <tr key={idx}>
                                                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-700">{rec.company}</td>
                                                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-700">{rec.name}</td>
                                                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-700">
                                                            {`${rec.zip || ''}${rec.city || ''}${rec.district || ''}${rec.address || ''}`}
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                    <p className="text-sm text-gray-500 mt-4">
                        您的使用者 ID: <span className="font-mono text-xs break-all">{userId}</span>
                    </p>
                </section>

                {/* Custom Confirmation Dialog */}
                {showConfirmDialog && (
                    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
                        <div className="bg-white rounded-lg p-6 shadow-xl max-w-sm w-full">
                            <h3 className="text-lg font-bold text-gray-900 mb-4">確認刪除</h3>
                            <p className="text-gray-700 mb-6">您確定要刪除這筆表單資料嗎？此操作無法復原。</p>
                            <div className="flex justify-end space-x-4">
                                <button
                                    onClick={cancelDelete}
                                    className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition duration-150 ease-in-out"
                                >
                                    取消
                                </button>
                                <button
                                    onClick={() => handleDeleteSubmittedForm(formToDelete)}
                                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition duration-150 ease-in-out"
                                >
                                    刪除
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

export default App;
